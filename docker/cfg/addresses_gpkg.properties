# General information about the api
# Not required, dummy values provided by the service
api.title=INSPIRE Simple Addresses, Finland
api.version=0.1
api.description=Example implementation of OGC API Services with hakunapi. INSPIRE Simple Addresses from Finland. Data from 13.02.2023 https://www.avoindata.fi/data/fi/dataset/rakennusten-osoitetiedot-koko-suomi by Finnish Digital and Population Data services Agency.
#api.contact.name=Name of Contact
#api.contact.email=concat@email.com
#api.contact.url=https://github.com/nlsfi/hakunapi
api.license.name=Data accessed from the API is licensed by the Digital and Population Data Services Agency CC BY 4.0 licence.
api.license.url=https://creativecommons.org/licenses/by/4.0/

# List of servers
## Required, comma-separated list of server the API is
servers=dev
## The url of the server has to be correct as it is used for all links generated by the server
servers.dev.url=http://localhost:8080/features
servers.dev.description=Development server

# API level configuration
formats=json,html,gpkg
formats.gpkg.dir=/app/features_addresses/tmp
getfeatures.limit.default=10
getfeatures.limit.max=10000

# Configure known srids (hakunapi will always add 84 (lon, lat) and 4326 (lat, lon))
srid=3067,4258
# Let hakunapi know that EPSG:4258 is lat,lon order
srid.4258.latLon=true

# Instead of loading PostGIS source drivers (the default) allow and load only GpkgSimpleSource
db.classes=fi.nls.hakunapi.source.gpkg.GpkgSimpleSource

# Collections and their configurations

## Required, comma-separated list of all collections
collections=simple_addresses

# Title and Description are extracted from gpkg_contents but can be overridden here if necessary
# collections.simple_addresses.title=Simple Addresses
# collections.simple_addresses.description=Addresses of Finlands Buildings

## Select a strategy for case-insensitive comparisons
## Valid values can be found from CaseInsensitiveStrategy enum (default value is `lower`)
## If we indexed an expression `upper(thoroughfare_name)` then it would make sense to configure this to `upper`
collections.simple_addresses.casei=lower

## Should properties with null values be omitted from the response
collections.simple_addresses.writeNulls=true

## GeoPackage configuration
### This collection is backed by 'gpkg' (GeoPackage) source/driver
### This is optional if only a single source type is available (via db.classes)
# collections.simple_addresses.type=gpkg

### File location of the geopackage file, absolute or relative (to directory containing this file)
### Currently only files are supported (remote source files over http(s) not supported)
collections.simple_addresses.db=simple_addresses.gpkg

### Table containing the features. collection id (simple_addresses here) will be used as fallback
# collections.simple_addresses.table=simple_addresses

### Spatial extent of the collection, required by some clients to recognize the colletion as a spatial feature collection
### Extent is extracted from gpkg_contents but can be overridden here if necessary
# collections.simple_addresses.extent.spatial.crs84=15.0537852,58.6074565,33.9935374,70.2641566

### Supported Coordinate Reference Systems for this collection (CRS:84 is always and automatically included)
collections.simple_addresses.srid=3067,4258

### Currently gpkg source always maps the primary key of the feature table to id property
### Geometry column is extracted from gpkg_geometry_columns

### Missing/empty or "*" publishes all columns from feature table as properties
# collections.simple_addresses.properties=*

### Manually list of all (other) property names
collections.simple_addresses.properties=inspireId_localId,inspireId_namespace,component_ThoroughfareName,component_PostalDescriptor,component_AdminUnitName_1,component_AdminUnitName_4,locator_designator_addressNumber,locator_level,locator_level_href,position_specification,position_specification_href,position_method,position_method_href,position_default,building,parcel

### Backing column of a property is configured via .mapping
collections.simple_addresses.properties.inspireId_localId.mapping=id
### property is mapped to a static value instead of column reference if mapping is single-quoted
collections.simple_addresses.properties.inspireId_namespace.mapping='https://github.com/INSPIRE-MIF/2017.2/GeoJSON/ads/examples/'

collections.simple_addresses.properties.component_ThoroughfareName.mapping=thoroughfare_name
collections.simple_addresses.properties.component_PostalDescriptor.mapping=postal_descriptor
collections.simple_addresses.properties.component_AdminUnitName_1.mapping='Suomi'
collections.simple_addresses.properties.component_AdminUnitName_4.mapping=admin_unit_name_4

collections.simple_addresses.properties.locator_designator_addressNumber.mapping=address_number
collections.simple_addresses.properties.locator_level.mapping='siteLevel'
collections.simple_addresses.properties.locator_level_href.mapping='https://inspire.ec.europa.eu/codelist/LocatorLevelValue/siteLevel'

collections.simple_addresses.properties.position_specification.mapping='building'
collections.simple_addresses.properties.position_specification_href.mapping='https://inspire.ec.europa.eu/codelist/GeometrySpecificationValue/building'
collections.simple_addresses.properties.position_method.mapping='byOtherParty'
collections.simple_addresses.properties.position_method_href.mapping='https://inspire.ec.europa.eu/codelist/GeometryMethodValue/byOtherParty'
collections.simple_addresses.properties.position_default.mapping='true'

### If the name of the property matches the name of the backing column no .mapping is required
### collections.simple_addresses.properties.building.mapping=building
### collections.simple_addresses.properties.parcel.mapping=parcel

## Queryables (names of the properties, not columns in the backing source)
collections.simple_addresses.parameters=inspireId_localId,component_ThoroughfareName,component_PostalDescriptor,component_AdminUnitName_4,locator_designator_addressNumber,building,parcel
